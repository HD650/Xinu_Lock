1.1. We can use the random boost solution, that if a process is in the ready queue and hold a lock. The os will randomly boost the priority of this process, so it will run first. This solution is easy to implement and can solve this problem in most cases.

1.2. Test case (you can watch the worker code in task1.c):

  kprintf("---lock with priority inheritance---\n");
  int lock=lcreate();
  int pid1=create(lock_worker,2000,20,"lock_worker_20",2,"lock_worker_20",lock);
  int pid2=create(lock_worker,2000,30,"lock_worker_30",2,"lock_worker_30",lock);
  int pid3=create(worker,2000,25,"worker_25",2,"worker_25",lock);
  resume(pid1);
  resume(pid2);
  resume(pid3);

  kprintf("---sem without priority inheritance---\n");
  int sem=screate(1);
  pid1=create(sem_worker,2000,20,"sem_worker_20",2,"sem_worker_20",sem);
  pid2=create(sem_worker,2000,30,"sem_worker_30",2,"sem_worker_30",sem);
  pid3=create(worker,2000,25,"worker_25",2,"worker_25",sem);
  resume(pid1);
  resume(pid2);
  resume(pid3);
  sleep(5);

The output is:
---lock with priority inheritance---
lock_worker_20 running...
lock_worker_20 got lock...
lock_worker_30 running...
lock_worker_30 got lock...
lock_worker_20 released lock...
lock_worker_30 released lock...
worker_25 running...
worker_25 done...
---sem without priority inheritance---
sem_worker_20 running...
sem_worker_20 got lock...
sem_worker_30 running...
worker_25 running...
worker_25 done...
sem_worker_30 got lock...
sem_worker_30 released lock...
sem_worker_20 released lock...

So we can see that, without priority inheritance, the worker with 25 priority preempyt the sem_worker with 20 priority, cause that the sem_work with 30 priority can't get the lock. So in the end, job with low priority run first, that's not good.
When we use the lock system with priority inheritance, the lock will upgrade lock_work with 20 priority to 30 priority. So the lock holder will run previous than worker with 25 priority. In the end, high priority job run first, that's good.

3.
